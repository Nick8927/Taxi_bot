from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime

from keyboards.reply import reply_report_menu, reply_drive_menu
from services.google_sheets import get_records_by_day, get_records_by_month

router = Router()

MONTHS_RU = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}


@router.message(F.text == "üìä –û—Ç—á—ë—Ç")
async def handle_report_menu(message: Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç—á—ë—Ç. /
         —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å FSM"""
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=reply_report_menu()
    )


@router.message(F.text == "üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å")
async def handle_today_report(message: Message):
    """–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    telegram_id = message.from_user.id
    today = datetime.now().strftime('%d.%m.%Y')

    records = get_records_by_day(telegram_id, today)

    if not records:
        await message.answer("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text_lines = [f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {today}:\n"]
    total_income = total_expense = 0

    for r in records:
        time, rec_type, category, amount, comment = r[1], r[2], r[3], r[4], r[5]
        line = f"{time} ‚Ä¢ {rec_type.upper()} ({category}) ‚Äî {amount}‚ÇΩ"
        if comment:
            line += f" ‚Äî {comment}"
        text_lines.append(line)

        try:
            amt = float(amount.replace(",", "."))
            if rec_type == "–¥–æ—Ö–æ–¥":
                total_income += amt
            elif rec_type == "—Ä–∞—Å—Ö–æ–¥":
                total_expense += amt
        except ValueError:
            pass

    text_lines.append(f"\n–ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥: {total_income:.2f}‚ÇΩ")
    text_lines.append(f"–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥: {total_expense:.2f}‚ÇΩ")
    text_lines.append(f"–ü—Ä–∏–±—ã–ª—å: {total_income - total_expense:.2f}‚ÇΩ")

    await message.answer("\n".join(text_lines))


@router.message(F.text == "üóì –ó–∞ –º–µ—Å—è—Ü")
async def handle_month_report(message: Message):
    """–æ—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    now = datetime.now()
    user_id = message.from_user.id

    records = get_records_by_month(user_id=user_id, month=now.month, year=now.year)

    if not records:
        await message.answer("üóì –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    total_income = sum(float(r[4]) for r in records if r[2].lower() == "–¥–æ—Ö–æ–¥")
    total_expense = sum(float(r[4]) for r in records if r[2].lower() == "—Ä–∞—Å—Ö–æ–¥")

    await message.answer(
        f"üóì –û—Ç—á—ë—Ç –∑–∞ {MONTHS_RU[now.month]} {now.year}:\n"
        f"–î–æ—Ö–æ–¥: {total_income:.2f} ‚ÇΩ\n"
        f"–†–∞—Å—Ö–æ–¥: {total_expense:.2f} ‚ÇΩ\n"
        f"–†–∞–∑–Ω–∏—Ü–∞: {total_income - total_expense:.2f} ‚ÇΩ"
    )


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back_to_main(message: Message, state: FSMContext):
    """–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_drive_menu()
    )


